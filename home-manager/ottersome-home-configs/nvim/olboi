"
"   /██    /██ /██                      /██████                       /██████  /██
"  | ██   | ██|__/                     /██__  ██                     /██__  ██|__/
"  | ██   | ██ /██ /██████/████       | ██  \__/  /██████  /███████ | ██  \__/ /██  /██████
"  |  ██ / ██/| ██| ██_  ██_  ██      | ██       /██__  ██| ██__  ██| ████    | ██ /██__  ██
"   \  ██ ██/ | ██| ██ \ ██ \ ██      | ██      | ██  \ ██| ██  \ ██| ██_/    | ██| ██  \ ██
"    \  ███/  | ██| ██ | ██ | ██      | ██    ██| ██  | ██| ██  | ██| ██      | ██| ██  | ██
"     \  █/   | ██| ██ | ██ | ██      |  ██████/|  ██████/| ██  | ██| ██      | ██|  ███████
"      \_/    |__/|__/ |__/ |__/       \______/  \______/ |__/  |__/|__/      |__/ \____  ██
"                                                                                  /██  \ ██
"                                                                                 |  ██████/
"                                                                                  \______/
"-------------------------------------------------------------------------------
" General Configs
"-------------------------------------------------------------------------------
":colorscheme kanagawa
:colorscheme nordic
set encoding=utf-8
set nocompatible              " be iMproved, required
filetype off                  " required
set shell=/usr/bin/zsh

" Relative numbering
:set relativenumber
:set ignorecase
:set rnu

" Persistent Undo
" Put plugins and dictionaries in this dir (also on Windows)
let vimDir = '$HOME/.config/nvim/'
let &runtimepath.=','.vimDir

"For Vimspector
let g:vimspector_enable_mappings = 'HUMAN'

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

" ENDOF persistent undo

let mapleader = " "
" set the runtime path to include Vundle and initialize
"set rtp+=~/.vim/bundle/Vundle.vim
set nowrap
set textwidth=0
set sr fo=roqm1 tw=64
im <C-B> <C-O>:setl sr! fo<C-R>=strpart("-+",&sr,1)<CR>=tc<CR>_<BS><Right>
imap <C-B> :call AutoWrapToggle()<CR>

nmap <F2> i<C-R>=strftime("%I:%M %p")<CR><Esc>
imap <F2> <C-R>=strftime("%I:%M %p")<CR>
nmap <F3> i<C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR><Esc>
imap <F3> <C-R>=strftime("%Y-%m-%d %a %I:%M %p")<CR>
nmap <F5> <Plug>VimspectorContinue

set hlsearch
set runtimepath^=~/.vim/bundle/
set enc=utf-8
set fileencoding=utf-8
syntax on
set number
set mouse=a
filetype plugin indent on 
set autoindent
filetype plugin on
au BufNewFile,BufRead *.endfile set filetype=endfile
" This remaps caps lock to esc while on vim, this way you can
" leave insert when pressing caps lock and not stretching your
" beautiful fingers :)
filetype plugin indent on

" Tab settings
set expandtab
set tabstop=4
set shiftwidth=4

" Copy and paste functionality
"vnoremap <C-c> "*y :let @+=@*<CR>
"map <C-p> "+P

" The spellcheck toggle
"map <F5> :setlocal spell! spelllang=en_us<CR>

"-------------------------------------------------------------------------------
" Plugin List
"-------------------------------------------------------------------------------
" Moved to lua script
"lua require('plugins')
require("lazy").setup(plugins, opts)
"-------------------------------------------------------------------------------
" Plugins  Settigs
"-------------------------------------------------------------------------------

" COC  Settigs

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
"  <C-n is ued bby nerdtree
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" Use <c-space> to trigger completion.
"if has('nvim')
"  inoremap <silent><expr> <c-space> coc#refresh()
"else
"  inoremap <silent><expr> <c-TAB> coc#refresh()
"endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <TAB> pumvisible() ? coc#_select_confirm()
                              \: "<TAB>"
                              "\: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> g[ <Plug>(coc-diagnostic-prev)
nmap <silent> g] <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> rn <Plug>(coc-rename)
nmap <Leader> f <Plug>(coc-format-selected)

"Ctrlp

nnoremap <C-l>  :CtrlPLine<CR>


" Vim spector mappings
nnoremap <Leader>dd :call vimspector#Launch()<CR>
nnoremap <Leader>ds :call vimspector#Reset()<CR>
nnoremap <Leader>dc :call vimspector#Continue()<CR>
nnoremap <Leader>de <Plug>VimspectorBalloonEval
nmap <Leader>db :call vimspector#ToggleBreakpoint()<CR>
nmap <Leader>dh <Plug>VimspectorStepOut
nmap <Leader>dl <Plug>VimspectorStepInto
nmap <Leader>dj <Plug>VimspectorStepOver



" coc-clangd
" Let clangd fully control code completion
let g:ycm_clangd_uses_ycmd_caching = 0
" Use installed clangd, not YCM-bundled clangd which doesn't get updates.
let g:ycm_clangd_binary_path = exepath("clangd")


let g:coc_global_extensions = [
            \ 'coc-tsserver',
            \ 'coc-html',
            \ 'coc-clangd',
            \ 'coc-css',
            \ 'coc-jedi',
            \ 'coc-go'
            \ ]
" Let clangd fully control code completion
" let g:ycm_clangd_uses_ycmd_caching = 0
" " Use installed clangd, not YCM-bundled clangd which doesn't get updates.

" Pywal for vim  "
"colorscheme wpgtk
"colorscheme everforest
"colorscheme kanagawa

au FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>
let g:md_pdf_viewer="zathura"
let g:md_args = "--template eisvogel --listings"

"Tex stuff
let g:livepreview_previewer = 'zathura'
let g:livepreview_engine = 'xelatex' 
"let g:livepreview_engine = 'pdflatex' 
set sr fo=roqm1 tw=90
im <C-B> <C-O>:setl sr! fo<C-R>=strpart("-+",&sr,1)<CR>=tc<CR>_<BS><Right>
     

if !exists('g:ycm_semantic_triggers')
    let g:ycm_semantic_triggers = {}
  endif
  let g:ycm_semantic_triggers.tex = ['@']

" Closing Preview Window for YCM
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:splitbelow = 1

"For grip
let vim_markdown_preview_github=1
let vim_markdown_preview_browser='Firefox'

"Air line for the status bar on the bottom 
let g:airline_powerline_fonts = 1

" Optional:

noremap <Leader>s :update<CR>
" nnoremap <Leader>c :set cursor<CR>
nnoremap <Leader>b :buffers<CR>:buffer<Space>
nnoremap <Leader>v :buffer#<CR>
" nnoremap <Leader>r :so $MYVIMRC<CR>
map <Leader>f :YcmCompleter FixIt<CR>
map <Leader>F :FZF <CR>
map <Leader>t :term <CR>
map <Leader>w :set wrap! <CR>
map <C-n> :NERDTreeToggle<CR>
filetype plugin indent on 

"This is nerd commenter
" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" General remaps 
noremap <Leader>g :ZenMode<CR>
noremap <Leader>h :tabp<CR>
noremap <Leader>l :tabn<CR>

" Some smoothness in scrolling
let g:comfortable_motion_scroll_down_key = "j"
let g:comfortable_motion_scroll_up_key = "k"
noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(40)<CR>
noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-40)<CR>

let g:python3_host_prog = '/home/ottersome/miniconda3/envs/research/bin/python'
"------------------------------------------------------------------------------
" ipython-cell configuration
"------------------------------------------------------------------------------
" Keyboard mappings. <Leader> is \ (backslash) by default

" map <Leader>s to start IPython
" nnoremap <Leader>s :SlimeSend1 ipython --matplotlib<CR>

" map <Leader>r to run script
" nnoremap <Leader>r :IPythonCellRun<CR>

" map <Leader>R to run script and time the execution
" nnoremap <Leader>R :IPythonCellRunTime<CR>

" map <Leader>c to execute the current cell
nnoremap <Leader>c :IPythonCellExecuteCell<CR>

" map <Leader>C to execute the current cell and jump to the next cell
nnoremap <Leader>C :IPythonCellExecuteCellJump<CR>

" map <Leader>l to clear IPython screen
" nnoremap <Leader>l :IPythonCellClear<CR>

" map <Leader>x to close all Matplotlib figure windows
nnoremap <Leader>x :IPythonCellClose<CR>

" map [c and ]c to jump to the previous and next cell header
nnoremap [c :IPythonCellPrevCell<CR>
nnoremap ]c :IPythonCellNextCell<CR>

" map <Leader>h to send the current line or current selection to IPython
" nmap <Leader>h <Plug>SlimeLineSend
" xmap <Leader>h <Plug>SlimeRegionSend

" map <Leader>p to run the previous command
nnoremap <Leader>p :IPythonCellPrevCommand<CR>

" map <Leader>Q to restart ipython
" nnoremap <Leader>Q :IPythonCellRestart<CR>

" map <Leader>d to start debug mode
nnoremap <Leader>d :SlimeSend1 %debug<CR>

" map <Leader>q to exit debug mode or IPython
nnoremap <Leader>q :SlimeSend1 exit<CR>

"For Running  Simple python Script
autocmd FileType python map <buffer> <F9> :w<CR>:exec '!python3' shellescape(@%, 1)<CR>
autocmd FileType python imap <buffer> <F9> <esc>:w<CR>:exec '!python3' shellescape(@%, 1)<CR>

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1
inoremap <Space><Tab> <Esc>/<++><Enter>"_c4l
vnoremap <Space><Tab> <Esc>/<++><Enter>"_c4l
map <Space><Tab> <Esc>/<++><Enter>"_c4l
autocmd BufRead,BufNewFile *.tex set filetype=tex
"""LATEX
	" Word count:
	autocmd FileType tex map <leader><leader>o :w !detex \| wc -w<CR>
	" Code snippets
	autocmd FileType tex inoremap ,fr \begin{frame}<Enter>\frametitle{}<Enter><Enter><++><Enter><Enter>\end{frame}<Enter><Enter><++><Esc>6kf}i
	autocmd FileType tex inoremap ,fi \begin{fitch}<Enter><Enter>\end{fitch}<Enter><Enter><++><Esc>3kA
	autocmd FileType tex inoremap ,exe \begin{exe}<Enter>\ex<Space><Enter>\end{exe}<Enter><Enter><++><Esc>3kA
	autocmd FileType tex inoremap ,em \emph{}<++><Esc>T{i
	autocmd FileType tex inoremap ,bf \textbf{}<++><Esc>T{i
	autocmd FileType tex vnoremap , <ESC>`<i\{<ESC>`>2la}<ESC>?\\{<Enter>a
	autocmd FileType tex inoremap ,it \textit{}<++><Esc>T{i
	autocmd FileType tex inoremap ,ct \textcite{}<++><Esc>T{i
	autocmd FileType tex inoremap ,cp \parencite{}<++><Esc>T{i
	autocmd FileType tex inoremap ,glos {\gll<Space><++><Space>\\<Enter><++><Space>\\<Enter>\trans{``<++>''}}<Esc>2k2bcw
	autocmd FileType tex inoremap ,x \begin{xlist}<Enter>\ex<Space><Enter>\end{xlist}<Esc>kA<Space>
	autocmd FileType tex inoremap ,ol \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
	autocmd FileType tex inoremap ,ul \begin{itemize}<Enter><Enter>\end{itemize}<Enter><Enter><++><Esc>3kA\item<Space>
	autocmd FileType tex inoremap ,li <Enter>\item<Space>
	autocmd FileType tex inoremap ,ref (\ref{})<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,tab \begin{tabular}<Enter><++><Enter>\end{tabular}<Enter><Enter><++><Esc>4kA{}<Esc>i
	autocmd FileType tex inoremap ,ot \begin{tableau}<Enter>\inp{<++>}<Tab>\const{<++>}<Tab><++><Enter><++><Enter>\end{tableau}<Enter><Enter><++><Esc>5kA{}<Esc>i
	autocmd FileType tex inoremap ,can \cand{}<Tab><++><Esc>T{i
	autocmd FileType tex inoremap ,con \const{}<Tab><++><Esc>T{i
	autocmd FileType tex inoremap ,v \vio{}<Tab><++><Esc>T{i
	autocmd FileType tex inoremap ,a \href{}{<++>}<Space><++><Esc>2T{i
	autocmd FileType tex inoremap ,sc \textsc{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,chap \chapter{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,sec \section{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,ssec \subsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,sssec \subsubsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,st <Esc>F{i*<Esc>f}i
	autocmd FileType tex inoremap ,beg \begin{DELRN}<Enter><++><Enter>\end{DELRN}<Enter><Enter><++><Esc>4k0fR:MultipleCursorsFind<Space>DELRN<Enter>c
	autocmd FileType tex inoremap ,up <Esc>/usepackage<Enter>o\usepackage{}<Esc>i
	autocmd FileType tex nnoremap ,up /usepackage<Enter>o\usepackage{}<Esc>i
	autocmd FileType tex inoremap ,tt \texttt{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,bt {\blindtext}
	autocmd FileType tex inoremap ,nu $\varnothing$
	autocmd FileType tex inoremap ,col \begin{columns}[T]<Enter>\begin{column}{.5\textwidth}<Enter><Enter>\end{column}<Enter>\begin{column}{.5\textwidth}<Enter><++><Enter>\end{column}<Enter>\end{columns}<Esc>5kA
    autocmd FileType tex inoremap ,rn (\ref{})<++><Esc>F}i
    autocmd FileType tex inoremap ,sus \textsubscript{}<++><Esc>T{i
